

[I/O via stdout AND stdin through rank==0 in MPI_COMM_WORLD]

General input questions:

cart_method: 0=end, 1=Dims_create+Cart_create, 2=Cart_weighted_create(WEIGHTS_EQUAL), 3=dito(weights), 4=dito manually, 5=Cart_ml_create(dims_ml) ?
start grid sizes integer start values for 3 dimensions (e.g., 2 2 2) ?
blocklength and stride of MPI_TYPE_VECTOR for each of the 3 dimensions, '0 0' stands for contiguous (e.g. 0 0 256 1024 8 32) ?

Reporting of all general input arguments:

cart_method = 1
start grid sizes integer start values for 3 dimensions = 2 2 2
blocklength & sgtride pairs for each of the 3 dimensions = 1 0   1 0   1 0  

Creating the Cartesian communicator and further input arguments:

cart_method == 1: MPI_Dims_create + MPI_Cart_create

[MPI_Barrier and switching to output via stdout through rank==0 in comm_cart]

ndims=3 dims= 8 6 4
    message size      transfertime  duplex bandwidth per process and neighbor (grid&halo in #floats)
       128 bytes       25.282 usec      5.063 MB/s gridsizes total=    16    12    12 per process=    2    2    3 halosize=       16 = + 6 + 6 + 4
       432 bytes       20.180 usec     21.408 MB/s gridsizes total=    24    24    24 per process=    3    4    6 halosize=       54 = + 24 + 18 + 12
      1728 bytes       13.442 usec    128.552 MB/s gridsizes total=    48    48    48 per process=    6    8   12 halosize=      216 = + 96 + 72 + 48
      6688 bytes       31.600 usec    211.646 MB/s gridsizes total=    96    96    92 per process=   12   16   23 halosize=      836 = + 368 + 276 + 192
     25576 bytes      106.759 usec    239.567 MB/s gridsizes total=   184   186   184 per process=   23   31   46 halosize=     3197 = + 1426 + 1058 + 713
    104408 bytes      262.284 usec    398.072 MB/s gridsizes total=   376   372   372 per process=   47   62   93 halosize=    13051 = + 5766 + 4371 + 2914
    411192 bytes     1004.739 usec    409.253 MB/s gridsizes total=   744   738   740 per process=   93  123  185 halosize=    51399 = + 22755 + 17205 + 11439
   1636392 bytes     3844.481 usec    425.647 MB/s gridsizes total=  1480  1476  1476 per process=  185  246  369 halosize=   204549 = + 90774 + 68265 + 45510
   6561336 bytes    15393.643 usec    426.237 MB/s gridsizes total=  2960  2958  2956 per process=  370  493  739 halosize=   820167 = + 364327 + 273430 + 182410
  26194104 bytes    88310.204 usec    296.615 MB/s gridsizes total=  5912  5910  5908 per process=  739  985 1477 halosize=  3274263 = + 1454845 + 1091503 + 727915


[I/O via stdout AND stdin through rank==0 in MPI_COMM_WORLD]

General input questions:

cart_method: 0=end, 1=Dims_create+Cart_create, 2=Cart_weighted_create(WEIGHTS_EQUAL), 3=dito(weights), 4=dito manually, 5=Cart_ml_create(dims_ml) ?
start grid sizes integer start values for 3 dimensions (e.g., 2 2 2) ?
blocklength and stride of MPI_TYPE_VECTOR for each of the 3 dimensions, '0 0' stands for contiguous (e.g. 0 0 256 1024 8 32) ?

Reporting of all general input arguments:

cart_method = 2
start grid sizes integer start values for 3 dimensions = 2 2 2
blocklength & sgtride pairs for each of the 3 dimensions = 1 0   1 0   1 0  

Creating the Cartesian communicator and further input arguments:

cart_method == 2: MPIX_Cart_weighted_create( MPIX_WEIGHTS_EQUAL )
MPIX_Cart_ml_create_from_comms: global_equal==1, nlevels=3, ndims=3 
MPIX_Cart_ml_create_from_comms: total_sizes= 192 24 12
MPIX_Cart_ml_create_from_comms:       sizes= 8 2 12
MPIX_Cart_ml_create_from_comms: dim_weights == MPIX_WEIGHTS_EQUAL
MPIX_Cart_ml_create_from_comms: dims_ml[d=0]=   2   2   2
MPIX_Cart_ml_create_from_comms: dims_ml[d=1]=   2   1   3
MPIX_Cart_ml_create_from_comms: dims_ml[d=2]=   2   1   2
MPIX_Cart_ml_create_from_comms:        dims= 8 6 4

[MPI_Barrier and switching to output via stdout through rank==0 in comm_cart]

ndims=3 dims= 8 6 4
    message size      transfertime  duplex bandwidth per process and neighbor (grid&halo in #floats)
       128 bytes        9.780 usec     13.088 MB/s gridsizes total=    16    12    12 per process=    2    2    3 halosize=       16 = + 6 + 6 + 4
       432 bytes       13.919 usec     31.037 MB/s gridsizes total=    24    24    24 per process=    3    4    6 halosize=       54 = + 24 + 18 + 12
      1728 bytes       14.257 usec    121.200 MB/s gridsizes total=    48    48    48 per process=    6    8   12 halosize=      216 = + 96 + 72 + 48
      6688 bytes       21.877 usec    305.705 MB/s gridsizes total=    96    96    92 per process=   12   16   23 halosize=      836 = + 368 + 276 + 192
     25576 bytes       64.721 usec    395.172 MB/s gridsizes total=   184   186   184 per process=   23   31   46 halosize=     3197 = + 1426 + 1058 + 713
    104408 bytes      167.279 usec    624.154 MB/s gridsizes total=   376   372   372 per process=   47   62   93 halosize=    13051 = + 5766 + 4371 + 2914
    411192 bytes      688.963 usec    596.827 MB/s gridsizes total=   744   738   740 per process=   93  123  185 halosize=    51399 = + 22755 + 17205 + 11439
   1636392 bytes     2777.500 usec    589.160 MB/s gridsizes total=  1480  1476  1476 per process=  185  246  369 halosize=   204549 = + 90774 + 68265 + 45510
   6561336 bytes    12401.161 usec    529.090 MB/s gridsizes total=  2960  2958  2956 per process=  370  493  739 halosize=   820167 = + 364327 + 273430 + 182410
  26194104 bytes    66426.044 usec    394.335 MB/s gridsizes total=  5912  5910  5908 per process=  739  985 1477 halosize=  3274263 = + 1454845 + 1091503 + 727915


[I/O via stdout AND stdin through rank==0 in MPI_COMM_WORLD]

General input questions:

cart_method: 0=end, 1=Dims_create+Cart_create, 2=Cart_weighted_create(WEIGHTS_EQUAL), 3=dito(weights), 4=dito manually, 5=Cart_ml_create(dims_ml) ?
start grid sizes integer start values for 3 dimensions (e.g., 2 2 2) ?
blocklength and stride of MPI_TYPE_VECTOR for each of the 3 dimensions, '0 0' stands for contiguous (e.g. 0 0 256 1024 8 32) ?

Reporting of all general input arguments:

cart_method = 1
start grid sizes integer start values for 3 dimensions = 1 2 4
blocklength & sgtride pairs for each of the 3 dimensions = 1 0   1 0   1 0  

Creating the Cartesian communicator and further input arguments:

cart_method == 1: MPI_Dims_create + MPI_Cart_create

[MPI_Barrier and switching to output via stdout through rank==0 in comm_cart]

ndims=3 dims= 8 6 4
    message size      transfertime  duplex bandwidth per process and neighbor (grid&halo in #floats)
       160 bytes       14.763 usec     10.838 MB/s gridsizes total=     8    12    24 per process=    1    2    6 halosize=       20 = + 12 + 6 + 2
       640 bytes       19.240 usec     33.263 MB/s gridsizes total=    16    24    48 per process=    2    4   12 halosize=       80 = + 48 + 24 + 8
      2216 bytes       28.777 usec     77.006 MB/s gridsizes total=    24    48    92 per process=    3    8   23 halosize=      277 = + 184 + 69 + 24
      8864 bytes       52.857 usec    167.696 MB/s gridsizes total=    48    96   184 per process=    6   16   46 halosize=     1108 = + 736 + 276 + 96
     34968 bytes      111.017 usec    314.978 MB/s gridsizes total=    96   186   372 per process=   12   31   93 halosize=     4371 = + 2883 + 1116 + 372
    137208 bytes      482.922 usec    284.121 MB/s gridsizes total=   184   372   740 per process=   23   62  185 halosize=    17151 = + 11470 + 4255 + 1426
    548088 bytes     1929.040 usec    284.125 MB/s gridsizes total=   376   738  1476 per process=   47  123  369 halosize=    68511 = + 45387 + 17343 + 5781
   2187192 bytes     7794.461 usec    280.608 MB/s gridsizes total=   744  1476  2956 per process=   93  246  739 halosize=   273399 = + 181794 + 68727 + 22878
   8740888 bytes    31862.521 usec    274.331 MB/s gridsizes total=  1480  2958  5908 per process=  185  493 1477 halosize=  1092611 = + 728161 + 273245 + 91205
  34936960 bytes   180135.880 usec    193.948 MB/s gridsizes total=  2960  5910 11816 per process=  370  985 2954 halosize=  4367120 = + 2909690 + 1092980 + 364450


[I/O via stdout AND stdin through rank==0 in MPI_COMM_WORLD]

General input questions:

cart_method: 0=end, 1=Dims_create+Cart_create, 2=Cart_weighted_create(WEIGHTS_EQUAL), 3=dito(weights), 4=dito manually, 5=Cart_ml_create(dims_ml) ?
start grid sizes integer start values for 3 dimensions (e.g., 2 2 2) ?
blocklength and stride of MPI_TYPE_VECTOR for each of the 3 dimensions, '0 0' stands for contiguous (e.g. 0 0 256 1024 8 32) ?

Reporting of all general input arguments:

cart_method = 2
start grid sizes integer start values for 3 dimensions = 1 2 4
blocklength & sgtride pairs for each of the 3 dimensions = 1 0   1 0   1 0  

Creating the Cartesian communicator and further input arguments:

cart_method == 2: MPIX_Cart_weighted_create( MPIX_WEIGHTS_EQUAL )
MPIX_Cart_ml_create_from_comms: global_equal==1, nlevels=3, ndims=3 
MPIX_Cart_ml_create_from_comms: total_sizes= 192 24 12
MPIX_Cart_ml_create_from_comms:       sizes= 8 2 12
MPIX_Cart_ml_create_from_comms: dim_weights == MPIX_WEIGHTS_EQUAL
MPIX_Cart_ml_create_from_comms: dims_ml[d=0]=   2   2   2
MPIX_Cart_ml_create_from_comms: dims_ml[d=1]=   2   1   3
MPIX_Cart_ml_create_from_comms: dims_ml[d=2]=   2   1   2
MPIX_Cart_ml_create_from_comms:        dims= 8 6 4

[MPI_Barrier and switching to output via stdout through rank==0 in comm_cart]

ndims=3 dims= 8 6 4
    message size      transfertime  duplex bandwidth per process and neighbor (grid&halo in #floats)
       160 bytes       11.001 usec     14.545 MB/s gridsizes total=     8    12    24 per process=    1    2    6 halosize=       20 = + 12 + 6 + 2
       640 bytes        8.740 usec     73.223 MB/s gridsizes total=    16    24    48 per process=    2    4   12 halosize=       80 = + 48 + 24 + 8
      2216 bytes        9.341 usec    237.228 MB/s gridsizes total=    24    48    92 per process=    3    8   23 halosize=      277 = + 184 + 69 + 24
      8864 bytes       19.641 usec    451.303 MB/s gridsizes total=    48    96   184 per process=    6   16   46 halosize=     1108 = + 736 + 276 + 96
     34968 bytes       65.060 usec    537.476 MB/s gridsizes total=    96   186   372 per process=   12   31   93 halosize=     4371 = + 2883 + 1116 + 372
    137208 bytes      196.581 usec    697.972 MB/s gridsizes total=   184   372   740 per process=   23   62  185 halosize=    17151 = + 11470 + 4255 + 1426
    548088 bytes      842.080 usec    650.874 MB/s gridsizes total=   376   738  1476 per process=   47  123  369 halosize=    68511 = + 45387 + 17343 + 5781
   2187192 bytes     3514.543 usec    622.326 MB/s gridsizes total=   744  1476  2956 per process=   93  246  739 halosize=   273399 = + 181794 + 68727 + 22878
   8740888 bytes    14226.160 usec    614.424 MB/s gridsizes total=  1480  2958  5908 per process=  185  493 1477 halosize=  1092611 = + 728161 + 273245 + 91205
  34936960 bytes    73926.120 usec    472.593 MB/s gridsizes total=  2960  5910 11816 per process=  370  985 2954 halosize=  4367120 = + 2909690 + 1092980 + 364450


[I/O via stdout AND stdin through rank==0 in MPI_COMM_WORLD]

General input questions:

cart_method: 0=end, 1=Dims_create+Cart_create, 2=Cart_weighted_create(WEIGHTS_EQUAL), 3=dito(weights), 4=dito manually, 5=Cart_ml_create(dims_ml) ?
start grid sizes integer start values for 3 dimensions (e.g., 2 2 2) ?
blocklength and stride of MPI_TYPE_VECTOR for each of the 3 dimensions, '0 0' stands for contiguous (e.g. 0 0 256 1024 8 32) ?

Reporting of all general input arguments:

cart_method = 3
start grid sizes integer start values for 3 dimensions = 1 2 4
blocklength & sgtride pairs for each of the 3 dimensions = 1 0   1 0   1 0  

Creating the Cartesian communicator and further input arguments:

cart_method == 3: MPIX_Cart_weighted_create( weights := 4.0 / gridsize_avg_per_proc_startval )
weights=  4.000000 2.000000 1.000000
MPIX_Cart_ml_create_from_comms: global_equal==1, nlevels=3, ndims=3 
MPIX_Cart_ml_create_from_comms: total_sizes= 192 24 12
MPIX_Cart_ml_create_from_comms:       sizes= 8 2 12
MPIX_Cart_ml_create_from_comms: dim_weights= 4.000000 2.000000 1.000000
MPIX_Cart_ml_create_from_comms: dims_ml[d=0]=   1   2   2
MPIX_Cart_ml_create_from_comms: dims_ml[d=1]=   2   1   3
MPIX_Cart_ml_create_from_comms: dims_ml[d=2]=   4   1   2
MPIX_Cart_ml_create_from_comms:        dims= 4 6 8

[MPI_Barrier and switching to output via stdout through rank==0 in comm_cart]

ndims=3 dims= 4 6 8
    message size      transfertime  duplex bandwidth per process and neighbor (grid&halo in #floats)
       128 bytes       15.659 usec      8.174 MB/s gridsizes total=     8    12    24 per process=    2    2    3 halosize=       16 = + 6 + 6 + 4
       432 bytes       13.599 usec     31.766 MB/s gridsizes total=    12    24    48 per process=    3    4    6 halosize=       54 = + 24 + 18 + 12
      1728 bytes       13.962 usec    123.766 MB/s gridsizes total=    24    48    96 per process=    6    8   12 halosize=      216 = + 96 + 72 + 48
      6688 bytes       14.582 usec    458.658 MB/s gridsizes total=    48    96   184 per process=   12   16   23 halosize=      836 = + 368 + 276 + 192
     26008 bytes       40.517 usec    641.906 MB/s gridsizes total=    92   186   376 per process=   23   31   47 halosize=     3251 = + 1457 + 1081 + 713
    103168 bytes      129.981 usec    793.716 MB/s gridsizes total=   184   372   744 per process=   46   62   93 halosize=    12896 = + 5766 + 4278 + 2852
    411192 bytes      518.179 usec    793.533 MB/s gridsizes total=   372   738  1480 per process=   93  123  185 halosize=    51399 = + 22755 + 17205 + 11439
   1639840 bytes     1847.200 usec    887.743 MB/s gridsizes total=   740  1476  2960 per process=  185  246  370 halosize=   204980 = + 91020 + 68450 + 45510
   6551480 bytes     8419.161 usec    778.163 MB/s gridsizes total=  1476  2958  5912 per process=  369  493  739 halosize=   818935 = + 364327 + 272691 + 181917
  26194104 bytes    38188.481 usec    685.916 MB/s gridsizes total=  2956  5910 11816 per process=  739  985 1477 halosize=  3274263 = + 1454845 + 1091503 + 727915


[I/O via stdout AND stdin through rank==0 in MPI_COMM_WORLD]

General input questions:

cart_method: 0=end, 1=Dims_create+Cart_create, 2=Cart_weighted_create(WEIGHTS_EQUAL), 3=dito(weights), 4=dito manually, 5=Cart_ml_create(dims_ml) ?
Application 2639761 resources: utime ~5435s, stime ~111s, Rss ~6552, inblocks ~0, outblocks ~0
